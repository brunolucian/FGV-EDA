#+TITLE:	Exercício 8.19 (Tardos)
#+AUTHOR:	Alice Duarte Scarpa, Bruno Lucian Costa
#+EMAIL:	alicescarpa@gmail.com, bruno.lucian.costa@gmail.com
#+DATE:		2015-06-23
#+OPTIONS: tex:t
#+OPTIONS: toc:nil
#+STARTUP: showall
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LaTeX_HEADER: \usemintedstyle{perldoc}
#+LaTeX_HEADER: \usepackage{tikz,enumerate}
#+LaTeX_HEADER: \usetikzlibrary{decorations.markings}
#+LaTeX_HEADER: \tikzstyle{vertex}=[circle, draw, inner sep=0pt, minimum size=7pt]
#+LaTeX_HEADER: \providecommand{\vertex}{\node[vertex]}

* Enunciado

Um comboio de navios chega ao porto com um total de $n$ vasilhames
contendo tipos diferentes de materiais perigosos.
Na doca, estão $m$ caminhões, cada um com capacidade para até $k$
vasilhames.  Para cada um dos dois problemas, dê um algoritmo
polinomial ou prove NP-completude:


- Cada vasilhame só pode ser carregado com segurança em alguns
  dos caminhões. Existe como estocar os $n$ vasilhames nos $m$
  caminhões de modo que nenhum caminhão esteja sobrecarregado, e
  todo vasilhame esteja num caminhão que o comporta com segurança?

- Qualquer vasilhame pode ser colocado em qualquer caminhão,
  mas alguns pares de vasilhames não podem ficar juntos num mesmo
  caminhão. Existe como estocar os $n$ vasilhames nos $m$
  caminhões de modo que nenhum caminhão esteja sobrecarregado e
  que nenhum dos pares proibidos de vasilhames esteja no mesmo
  caminhão?

* Item A

Uma solução força-bruta para esse problema seria:

- Estenda a lista de vasilhames com vasilhames vazios, até que ela
  tenha tamanho $mk$ (a capacidade total de todos os
  caminhões). Vasilhames vazios podem ser transportados em qualquer
  caminhão (e correspondem a um lugar sobrando no mesmo).
- Para cada uma das $(mk)!$ ordenações da lista acima, considere que
  os $k$ primeiros vasilhames vão para o primeiro caminhão, os $k$
  próximos para o segundo e assim até o final da lista. Se cada
  vasilhame estiver em um camihão que o comporta com segurança,
  retorne essa solução, se não, tente com uma nova ordem.

Esse algoritmo faz $(mk)!$ iterações do loop principal no pior caso, cada
iteração tem custo $mk$ para conferir se é uma solução válida. Isso dá
uma complexidade total de $O(mk(mk)!)$

Esse é um algoritmo super-exponencial para o problema, mas isso não
significa que o problema é NP-completo. Na verdade, como veremos a
seguir, esse problema não é NP-completo pois aceita uma solução
polinomial usando fluxos.

** Solução com fluxos

Podemos transformar esse problemas em um problema de encontrar o fluxo
máximo de um grafo usando a seguinte construção:

+ Criamos um vértice $s$ representando a fonte e um vértice $t$
  representando o dreno

+ Para cada vasilhame $v_i \in \{v_1, v_2, \ldots, v_n\}$ criamos um
  vértice $v_i$ e uma aresta $(s, v_i)$ capacidade 1

+ Para cada caminhão $C_i \in \{C_1, C_2, \ldots, C_m\}$ criamos um
  vértice $C_i$. Se o vasilhame $v_j$ puder ser transportado com
  segurança no caminhão $C_i$ criamos uma aresta $(v_j, C_i)$ de
  capacidade 1. Para cada caminhão criamos também uma aresta $(C_i, t)$
  de capacidade $k$.

Dessa forma, existe uma configuração possível de caminhões se e
somente se o fluxo máximo tem valor $m$.

De fato, se encontramos um fluxo máximo de valor $m$ então exatamente
uma aresta com origem em cada vasilhame terá fluxo 1. Se colocarmos
cada vasilhame no caminhão de destino da aresta de fluxo 1 obtemos um
posicionamento válido. Por outro lado, se existe um arranjo válido,
colocando 1 de fluxo nas arestas entre os vasilhames e os caminhões
que os contém nesse arranjo obtemos um fluxo de valor $m$.

 Para a seguinte situação:
#+tblname: regras_vasilhames
| Capacidade    |  3 |
| Total de cam. |  4 |
| Total de vas. | 10 |


#+ATTR_LATEX: :align  r l
#+tblname: seguros
| Vasilhame | Cam. seguros |
|         1 | 1, 4         |
|         2 | 1, 2         |
|         3 | 3, 4         |
|         4 | 4            |
|         5 | 1, 2, 3, 4   |
|         6 | 1            |
|         7 | 3            |
|         8 | 1, 2, 3      |
|         9 | 2, 3         |
|        10 | 4            |



A construção seria como ilustrado na figura abaixo. Omitimos as
capacidades iguais a 1 para não poluir demais a imagem.

\[\begin{tikzpicture}[x=0.25\textwidth,
    every edge/.style={
        draw,
        postaction={decorate,
                    decoration={markings,mark=at position 1 with {\arrow[line width = 0.5mm]{stealth}}}
                   }
        }
]
\vertex (fonte) at (0,5) [label=above:$s$] {};
\vertex (v1) at (1,10) [label=above:$v_1$] {};
\vertex (v2) at (1,9) [label=above:$v_2$] {};
\vertex (v3) at (1,8) [label=above:$v_3$] {};
\vertex (v4) at (1,7) [label=above:$v_4$] {};
\vertex (v5) at (1,6) [label=above:$v_5$] {};
\vertex (v6) at (1,5) [label=above:$v_6$] {};
\vertex (v7) at (1,4) [label=above:$v_7$] {};
\vertex (v8) at (1,3) [label=above:$v_8$] {};
\vertex (v9) at (1,2) [label=above:$v_9$] {};
\vertex (v10) at (1,1) [label=above:$v_{10}$] {};
\vertex (C1) at (2.5,10) [label=above:$C_1$] {};
\vertex (C2) at (2.5,7) [label=above:$C_2$] {};
\vertex (C3) at (2.5,4) [label=above:$C_3$] {};
\vertex (C4) at (2.5,1) [label=above:$C_4$] {};
\vertex (dreno) at (3.5,5) [label=above:$t$] {};
\path
(fonte) edge (v1)
(fonte) edge (v2)
(fonte) edge (v3)
(fonte) edge (v4)
(fonte) edge (v5)
(fonte) edge (v6)
(fonte) edge (v7)
(fonte) edge (v8)
(fonte) edge (v9)
(fonte) edge (v10)
(v1) edge (C1)
(v1) edge (C4)
(v2) edge (C1)
(v2) edge (C2)
(v3) edge (C3)
(v3) edge (C4)
(v4) edge (C4)
(v5) edge (C1)
(v5) edge (C2)
(v5) edge (C3)
(v5) edge (C4)
(v6) edge (C1)
(v7) edge (C3)
(v8) edge (C1)
(v8) edge (C2)
(v8) edge (C3)
(v9) edge (C2)
(v9) edge (C3)
(v10) edge (C4)
(C1) edge node [above] {$4$} (dreno)
(C2) edge node [above] {$4$} (dreno)
(C3) edge node [above] {$4$} (dreno)
(C4) edge node [above] {$4$} (dreno)
;
\end{tikzpicture}\]

*** Implementação

Primeiramente, precisamos ser capazes de ler a tabela acima para
passar os valores para o nosso algoritmo.
#+NAME: processa_regras_vasilhames
#+BEGIN_SRC python
capacidade_por_caminhao = regras[0][1]
total_de_vasilhames = regras[2][1]
#+END_SRC

#+NAME: processa_seguros
#+BEGIN_SRC python
vasilhames = collections.OrderedDict()
caminhoes = []
for line in seguros[1:]:
    # Nomeando os vasilhames
    vasilhame = 'v_%s' % line[0]
    vasilhames[vasilhame] = []
    for caminhao in str(line[1]).split(','):
        nome = 'C_%s' % caminhao.strip()
        vasilhames[vasilhame].append(nome)
        if nome not in caminhoes:
            caminhoes.append(nome)
#+END_SRC

Vamos usar a classe RedeDeFluxo, que definimos para a questão 7.28.

#+NAME: cria_grafo
#+BEGIN_SRC python
def cria_grafo(vasilhames, caminhoes, capacidade_por_caminhao):
    G = RedeDeFluxo()
    G.novo_vertice('Fonte')
    G.novo_vertice('Dreno')

    # Criando um vertice para cada caminhao e ligando esse
    # vertice ao dreno
    for caminhao in caminhoes:
        G.novo_vertice(caminhao)
        G.nova_aresta(caminhao, 'Dreno',
                      capacidade_por_caminhao, 0)

    for vasilhame, caminhoes in vasilhames.iteritems():
        # Criando um vertice para cada vasilhame e conectando
        # a fonte a cada um dos vasilhames
        G.novo_vertice(vasilhame)
        G.nova_aresta('Fonte', vasilhame, 1, 0)

        # Conectando o vasilhame a cada caminhao que pode
        # transporta-lo
        for caminhao in caminhoes:
            G.nova_aresta(vasilhame, caminhao, 1, 0)

    return G
#+END_SRC

Como nesse problema as demandas já são 0, podemos aplicar
Ford-Fulkerson diretamente, usando a mesma implementação que fizemos
para o exercício 7.28.

Podemos então rodar Ford-Fulkerson e ver se o fluxo máximo encontrado
é igual ao total de vasilhames. Se for, isso significa que o problema
tem uma solução, que vamos retornar. Caso contrário não existe arranjo
possível.
#+NAME: rodando_vasilhames
#+BEGIN_SRC python
G = cria_grafo(vasilhames, caminhoes, capacidade_por_caminhao)
fluxo = G.fluxo_maximo('Fonte', 'Dreno')
if fluxo == total_de_vasilhames:
    tabela_de_vasilhames = []
    for vasilhame in vasilhames:
        for w in G.adj[vasilhame]:
            if G.fluxo[w] == 1:
                tabela_de_vasilhames.append([w.origem, w.destino])
    return tabela_de_vasilhames
else:
    return 'Impossivel'
#+END_SRC

A solução para a nossa entrada:
#+NAME: ford_fulkerson
#+BEGIN_SRC python :exports none
class Aresta():
    def __init__(self, origem, destino, capacidade, demanda):
        self.origem = origem
        self.destino = destino
        self.capacidade = capacidade
        self.demanda = demanda
        self.reversa = None
        self.original = True

class RedeDeFluxo():
    def __init__(self):
        self.adj = collections.OrderedDict()
        self.fluxo = {}

    def novo_vertice(self, v):
        self.adj[v] = []

    def nova_aresta(self, origem, destino, capacidade, demanda):
        aresta = Aresta(origem, destino, capacidade, demanda)
        self.adj[origem].append(aresta)

        # Criando a aresta reversa
        aresta_reversa = Aresta(destino, origem, 0, -demanda)
        self.adj[destino].append(aresta_reversa)
        aresta_reversa.original = False

        # Marcando aresta e aresta_reversa como reversas uma da outra
        aresta.reversa = aresta_reversa
        aresta_reversa.reversa = aresta

    def novo_fluxo(self, e, f):
        self.fluxo[e] = f

    def encontra_arestas(self, v):
        return self.adj[v]

    def valor_do_fluxo(self, fonte):
        valor = 0
        for aresta in self.encontra_arestas(fonte):
            valor += self.fluxo[aresta]
        return valor

    def encontra_gargalo(self, caminho):
        residuos = []
        for aresta in caminho:
            residuos.append(aresta.capacidade - self.fluxo[aresta])
        return min(residuos)

    def expande_caminho(self, caminho):
        gargalo = self.encontra_gargalo(caminho)
        for aresta in caminho:
            self.fluxo[aresta] += gargalo
            self.fluxo[aresta.reversa] -= gargalo

    def cria_fluxo_inicial(self):
        for vertice, arestas in self.adj.iteritems():
            for aresta in arestas:
                self.fluxo[aresta] = 0

    def encontra_caminho(self, fonte, dreno, caminho, visitados):
        if fonte == dreno:
            return caminho

        visitados.add(fonte)

        for aresta in self.encontra_arestas(fonte):
            residuo = aresta.capacidade - self.fluxo[aresta]
            if residuo > 0 and aresta.destino not in visitados:
                resp = self.encontra_caminho(aresta.destino,
                                             dreno,
                                             caminho + [aresta],
                                             visitados)
                if resp != None:
                    return resp

    def fluxo_maximo(self, fonte, dreno):
        self.cria_fluxo_inicial()

        caminho = self.encontra_caminho(fonte, dreno, [], set())
        while caminho is not None:
            self.expande_caminho(caminho)
            caminho = self.encontra_caminho(fonte, dreno, [], set())
        return self.valor_do_fluxo(fonte)

#+END_SRC

#+BEGIN_SRC python :tangle solucao_a.py :noweb yes :exports results :var seguros=seguros regras=regras_vasilhames
# coding: utf-8
import collections

<<ford_fulkerson>>

<<processa_regras_vasilhames>>

<<processa_seguros>>

<<cria_grafo>>

<<rodando_vasilhames>>
#+END_SRC

*** Complexidade

Como vimos no exercício 7.28, O algoritmo de Ford-Fulkerson tem
complexidade $O((V + E)F)$ em que $V$ é a quantidade de vértices, $E$
é a quantidade de arestas e $F$ é o maior valor possível para o fluxo.

No caso, $V = m + n + 2$, $E \leq n + nm + m$ e o maior fluxo possível é
$n$, totalizando uma complexidade máxima $O(n^2m)$, o que é polinomial na
entrada.

* Item B

Vamos mostrar que é possível reduzir uma instância do 3-SAT a um
problema de colocar vasilhames em caminhões seguindo as restrições do
enunciado. De modo que, como 3-SAT é NP-completo, nosso problema
também é.

Mas antes, temos que mostrar que nosso problema está em $NP$.

** Caminhões \in NP

Para mostrarmos que o nosso problema está em $NP$, temos que provar
que é possível verificar em tempo polinomial se um arranjo de
vasilhames em caminhões é válido.

Dada uma lista $V = [i_1, i_2, \ldots , i_n]$ tal que o
$j$-ésimo vasilhame $v_j$ está no caminhão $C_{i_j}$, o
seguinte algoritmo verifica se o arranjo é válido em tempo
$O(m + |\textit{incompativeis}|) = O(m + n^2)$ :
#+NAME: verifica_arranjo
#+BEGIN_SRC python
def verifica_arranjo(V, incompativeis, m, k):
    por_caminhao = [0] * m
    for caminhao in V:
        por_caminhao[caminhao] += 1

    # Verifica se cada caminhao tem no maximo k vasilhames
    for i in xrange(m):
        if por_caminhao[i] > k:
            return False

    # Verifica se um caminhao tem um par incompativel
    for (v1, v2) in incompativeis:
        if V[v1] == V[v2]:
            return False

    return True
#+END_SRC

** Definindo 3-SAT

3-SAT é o problema de dado um conjunto de variáveis $v_1, \ldots, v_x$
e cláusulas $K_1, \ldots, K_y$, onde cada cláusula é constituída de no
máximo três elementos do universo de \textit{literais}, $\{v_1,
\overline{v_1}, \ldots, v_x, \overline{v_x}\}$, encontrar uma
atribuição de valores Verdadeiro/Falso para cada variável
que faça com que todas as cláusulas sejam verdadeiras.

** 3-SAT $\to$ Caminhões

Dada uma instância do 3-SAT, vamos construir uma instância do problema
enunciado que admite solução se e somente se tal
instância do 3-SAT admite solução.

Primeiramente, note que podemos assumir que nosso
problema de 3-SAT tem pelo menos quatro variáveis, adicionando
variáveis que não aparecem em cláusula alguma se necessário.

*** Construção

Vamos começar a construção sem as cláusulas:

- São $x+1$ caminhões, cada um de capacidade $3x+y$

- Existe um vasilhame para cada um dos $2x$ literais em $\{v_1,
  \overline{v_1}, \ldots, v_x, \overline{v_x}\}$. Esses vasilhames têm o
  mesmo nome do literal a que correspondem.

- Existe um vasilhame adicional $w_i$ para cada variável $v_i$

Queremos criar restrições entre os vasilhames de modo que, em uma
atribuição válida:

1. $x$ dos caminhões contenham exatamente um literal verdadeiro cada.
2. O caminhão restante contenha todos os literais falsos;

Para garantir as condições acima, vamos criar os seguintes conflitos:
- $w_i$ conflita com $w_j$ para todo $i \neq j$.
- $w_i$ e conflita com $v_j$ e com $\overline{v_j}$, se $i \neq j$.
- $v_i$ conflita com $\overline{v_i}$.

Com isso, garantimos as seguintes propriedades:

\begin{enumerate}[($P_1$)]
\item Como todos os $w_i$ conflitam entre si, é necessário um
caminhão por $w_i$.

\item Como $w_i$ conflita com todos os literais tais que
$i \neq j$, o caminhão que contém $w_i$ só pode conter literais
correspondentes a $i$-ésima variável.

\item $v_i$ e $\overline{v_i}$ não
podem estar ambas no caminhão do $w_i$, pois elas conflitam entre si.

\item Mais ainda, $\textit{exatamente}$ um elemento do par $\{v_i,
\overline{v_i}\}$ está no caminhão do $w_i$ numa atribuição válida: Se
nenhuma delas estivesse no caminhão do $w_i$, estariam ambas no único
caminhão que não contém nenhum $w$ (pois todos os outros caminhões
contém um $w_j$ com $i \neq j$, o que conflita com $v_i$ e
$\overline{v_i}$ por $P_2$), o que também não pode acontecer por $P_3$.
\end{enumerate}



Agora, vamos adicionar as cláusulas à nossa construção:

- Existe um vasilhame para cada uma das $y$ cláusulas $K_1, \ldots, K_y$

Com seguinte conflito:

- $K_i$ conflita com $v_j$ se $v_j \not\in K_i$. Similarlmente, $K_i$
  conflita com $\overline{v_j}$ se $\overline{v_j} \not\in K_i$.

Ou seja, permitimos colocar o vasilhame da cláusula $K_i$ num caminhão
apenas se a cláusula contém todos os literais que vão viajar no
caminhão.

Dessa forma, uma cláusula nunca pode viajar no caminhão dos literais
falsos, pois cada a cláusula contém no máximo três literais e temos no
mínimo quatro literais falsos, de modo que há garantidamente um
literal que não aparece na cláusula e portanto conflita com ela.

*** Obtendo uma solução

Para completar a nossa redução, precisamos de duas coisas:
- A partir de uma solução do problema dos caminhões que construimos,
  encontrar em tempo polinomial uma solução do 3-SAT correspondente
- Provar que quando nenhuma solução do problema dos caminhões existe o
  3-SAT também não tem solução

**** Solução caminhões $\to$ Solução 3-SAT

Se existe uma solução para o problema, então todo caminhão que contém
um vasilhame do tipo $w_i$ também contém um vasilhame correspondente a
um literal, pela propriedade $P_4$; esse literal será marcado como
verdadeiro. Todos os outros literais serão marcados como falsos. Essa
marcação é consistente, pois para cada $i \in \{1, 2, \ldots, x\}$
exatamente um literal entre $v_i, \overline{v_i}$ que está no mesmo
caminhão que $w_i$. Como todas as cláusulas têm que estar em um
caminhão que contém um vasilhame do tipo $w_i$ e esse caminhão tem que
conter um literal que está na cláusula, essa marcação faz com que
todas as cláusulas sejam verdadeiras.


**** $\not \exists$ solução caminhões $\Rightarrow \not \exists$ solução 3-SAT

É mais fácil provar a contrapositiva, isso é, $\exists$ solução 3-SAT
$\Rightarrow \exists$ solução caminhões.

Seja $S$ os conjuntos dos literais verdadeiros na solução do 3-SAT.
Então:
- $S \subset \{v_1,\overline{v_1}, \ldots, v_x, \overline{v_x}\}$
- $\forall \; 1\leq i \leq x, |S\cap\{v_i, \overline{v_i}\}| = 1$
- $\forall \; 1\leq j \leq y, S\cap K_j \neq \emptyset$

Podemos construir uma solução válida para o problema dos caminhões da
seguinte forma:
- $\forall \; 1\leq i \leq x$, coloque o vasilhame $w_i$ no caminhão $C_i$
- $\forall \; 1\leq i \leq x$, coloque o vasilhame $S\cap\{v_i, \overline{v_i}\}$ em $C_i$
- $\forall \; 1\leq j \leq y$, seja $i$ o menor valor tal que $v_i$ ou
  $\overline{v_i}$ está em $S\cap K_j$. Coloque o vasilhame $K_j$ em $C_i$.
- Coloque todos os literais em $\{v_1,\overline{v_1}, \ldots, v_x,
  \overline{v_x}\} - S$ no caminhão $C_{x+1}$


Isso respeita todas as restrições. De fato, cada $K_j$ está num
caminhão que só contém um vasilhame correspondente a um literal e,
pelo item 3, o vasilhame do literal não conflita com o vasilhame da
cláusula. Além disso, cada $w_i$ está em seu próprio caminhão, nenhum
par $\{v_i, \overline{v_i}\}$ aparece num mesmo caminhão e nenhum
$w_i$ aparece no mesmo caminhão de um literal $v_j$ ou
$\overline{v_j}$ com $i \neq j$.

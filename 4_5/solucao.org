#+TITLE:	Exercício 4.5 (Tardos)
#+AUTHOR:	Alice Duarte Scarpa, Bruno Lucian Costa
#+EMAIL:	alicescarpa@gmail.com, bruno.lucian.costa@gmail.com
#+DATE:		2015-06-23
#+OPTIONS: tex:t
#+OPTIONS: toc:nil
#+STARTUP: showall
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LaTeX_HEADER: \usemintedstyle{perldoc}

* Enunciado

Vamos considerar uma rua campestre longa e quieta, com casas
espalhadas bem esparsamente ao longo da mesma. (Podemos imaginar a
rua como um grande segmento de reta, com um extremo leste e um
extremo oeste.) Além disso, vamos assumir que, apesar do ambiente
bucólico, os residentes de todas essas casas são ávidos usuários de
telefonia celular.

Você quer colocar estações-base de celulares em certos pontos da
rodovia, de modo que toda casa esteja a no máximo quatro milhas de
uma das estações-base. Dê um algoritmo eficiente para alcançar esta
meta, usando o menor número possível de bases.

* Introdução
\label{sec-2}

Com este exercício vamos abordar uma técnica chamada de algoritmos
gulosos sempre realizando a escolha que parece ser a melhor no
momento, fazendo uma escolha ótima local, com intuito de que esta
escolha leve até a solução ótima global.

Antes porém, vai ser apresentado soluções utilizando algoritmos
``naive'' e um força bruta.


* Soluções para o problema
\label{sec-3}


** Algoritmo naive
\label{sec-3-1}

Esta primeira solução para o problema é uma das mais simples possiveis
de se pensar quando confrontamos o problema.  O problema diz que temos
que colocar uma antena a no máximo 4 milhas de distancias, nesse
algoritmo fizemos a solução baseado apenas nessa ideia, então com ele
vamos colocar uma antena a cada 4 milhas de distancia até que a casa
mais distante esteja coberta pela nossas antenas.

#+NAME: naive
#+BEGIN_SRC python
def antena(lista):
    lmax = max(lista) # Valor maximo presente na lista de distancias
    ant = []
    j = 0
    for i in range(lmax): # Coloca uma antena a cada 4 milhas
        if j >= lmax: # Ver se a antena tem posicao maior que maximo da lista
            return ant
        j += 4
        ant.append(j)
#+END_SRC

Esse algoritmo bem simples nos retorna uma solução correta para o
problema, mas ele ainda nos faz colocar muitas antenas de forma
desnecessárias como podemos ver no exemplo a seguir.

Chamada da função:
#+NAME: chama
#+BEGIN_SRC python
print antena([3, 16, 11, 18, 5, 17, 24, 29, 1, 301])
#+END_SRC

#+NAME: roda_naive
#+BEGIN_SRC python :tangle solucao_naive.py :noweb yes :exports results :results output latex
<<naive>>
<<chama>>
#+END_SRC

Resultado:
#+RESULTS: roda_naive

Outro algoritmo ``naive'' que tem uma solução melhor do que anterior será apresentado a seguir.

#+NAME: naive2
#+BEGIN_SRC python
def antena(lista):
   ant=[]
   for i in xrange(len(lista)): #Pecorre toda a lista
       ant.append(lista[i]) #Para cada item da lista coloca uma antena

   ant.sort()
   return ant
#+END_SRC

Neste algoritmo a ideia seria colocar uma antena para cada casa o que
resolveria nosso problema.

Vamos rodar o novo algoritmo com o mesmo exemplo que usamos na solução
anterior para compararmos as soluções.

#+BEGIN_SRC python
print antena([3, 16, 11, 18, 5, 17, 24, 29, 1, 301])
#+END_SRC

#+NAME: roda_naive2
#+BEGIN_SRC python :tangle solucao_naive.py :noweb yes :exports results :results output table
<<naive2>>
<<chama>>
#+END_SRC

Resultado:
#+RESULTS: roda_naive2

Já conseguimos perceber uma diferença muito grande entre as soluções.

Esses dois algoritmos até agora apresentados não nos retorna a melhor
solução, os proximos algoritmos tentaremos conseguir a solução ótima
para resolução deste problema.

** Força bruta
\label{sec-3-2}

Esse algoritmo de força bem simples escolhe um ponto qualquer dentro
dessa rua para coloca uma antena, depois disso ele percorre toda a
lista para ver se tem alguma casa que é coberta por essa antena, se
tiver retiramos essa casa da lista e efetuamos esse procedimento até
que todas as casas tenham sido cobertas.


#+NAME: forca_bruta
#+BEGIN_SRC python
import math, numpy
def antena(lista):
  lmax = max(lista)# Valor maximo presente na lista de distancias
  ant = []

  while lista != []: # Realizar procedimento ate todas as casas cobertas
      torre = numpy.random.randint(1, lmax) #fixando uma torre em um ponto qualquer
      for j in lista: #Passando toda a lista
          if j >= torre-4 and j <= torre+4: # Verifica se tem casa esta coberta
              lista.remove(j) # remove a casa coberta
              ant.append(torre) # adciona a torre a lista

  ant = list(set(ant)) # Remove as torres colocadas em duplicatas
  ant.sort() #Ordena as torres

  return ant
#+END_SRC

Vamos rodar o algoritmo com o mesmo exemplo usado com os algoritmos
anteriores para vermos a diferença entre as soluções.


#+BEGIN_SRC python
print antena([3, 16, 11, 18, 5, 17, 24, 29, 1, 301])
#+END_SRC

#+NAME: roda_forca_bruta
#+BEGIN_SRC python :tangle solucao_forca_bruta.py :noweb yes :exports results :results output table
<<forca_bruta>>
<<chama>>
#+END_SRC

Resultado:
#+RESULTS: roda_forca_bruta

A solução do algoritmo para esse problema pode até ser a ótima
eventualmente mas em suma ele demora mais a conseguir uma resposta
para o problema devido a sua escolha aleatória do local a colocar a
antena.

Em outras palavras esse algoritmo trabalha muito parecido com o jogo
de batalha naval, ele escolhe aleatoriamente uma antena para colocar
porém algumas vezes pode escolher em local vazio gerando retrabalho o
algoritmo.

** Algoritmo guloso
\label{sec-3-3}

Esse algoritmo recebe uma lista com as distâncias das casas até o
ponto inicial. Começamos nosso algoritmo saindo do ponto inicial,
a oeste, em direção ao leste até que primeira casa esteja 4 milhas a
oeste colocamos uma antena neste local e retiramos da lista todas as
casas cobertas por essa antena. Depois continuamos com esse processo
até todas as casas serem retiradas da lista.

#+NAME: guloso
#+BEGIN_SRC python
  def antena(lista):
      ant = []
      lista.sort()

      tamanho = len(lista)
      for i in range(tamanho):
          if len(ant) == 0:
              # O valor de -10 nao afeta a resposta, pois as posicoes
              # das casas sao positivas
              alcance = -10
          else:
              alcance = ant[-1] + 4

          if lista[i] > alcance:
              ant.append(lista[i] + 4)

      return ant
#+END_SRC

Vamos reproduzir o mesmo exemplo feito com o algoritmos anteriores
para vermos a diferença entre as soluções.

#+BEGIN_SRC python :noweb yes
<<chama>>
#+END_SRC

#+NAME: roda_guloso
#+BEGIN_SRC python :tangle solucao_guloso.py :noweb yes :exports results :results output table
<<guloso>>
<<chama>>
#+END_SRC

Resultado:
#+RESULTS: roda_guloso

Esse algoritmo sempre nos retorna a solução ótima e vamos mostrar isso
a seguir.

Suponha $S = \{ s_1, \ldots s_k \}$ sendo a solução com as posições
das antenas que o nosso algoritmo retornou e $T = \{ t_1, \ldots t_m
\}$ sendo a solução ótima com as posições das antenas ordenadas de
forma crescente. Queremos mostrar que $k=m$.

Vamos mostrar nosso algoritmo $S$ ``stays ahead'' da solução $T$. Ou
seja, $s_i \geq t_i$.  Para $i = 1$ essa afirmação é verdade, já que
vamos ao leste o máximo possivel antes de colocar a antena.  Iremos
assumir também é verdade para $i \geq 1$, ou seja, $\{ s_1 \ldots s_i
\}$ cobre as mesmas casas que $\{ t_1 \ldots t_i \}$, então se
adicionarmos $t_{i+1}$ para $\{ s_1 \ldots s_i \}$, não deixa nenhuma
casa entre $s_i$ e $t_{i+1}$ descobertas.  Mas no passo $(i+1)$ do
algoritmo guloso é escolhido o $s_{i+1}$ para ser o maior possivel com
a condição cobrir as casas entre $s_i$ e $s_{i+1}$ e então $s_{i+1} >
t_{i+1}$ o que prova o que queriamos.

Então, se $k>m$, a solução $\{ s_1 \ldots s_m \}$ falha ao cobrir
todas as casas, mas $s_m \geq t_m$ logo $\{ t_1 \ldots t_m \} = T$
também falha ao cobrir todas as casas. O que é uma contradição, pois
assumimos que $T$ era uma solução ótima para o problema.


* Complexidade
\label{sec-5}

Para o problema proposto foi apresentado quatro possiveis
soluções. Duas opções ``naive'', uma força bruta e outra utilizando o
método de algoritmo guloso.

A primeira solução ``naive'' é linear em relação ao tamanho da rua, ou
seja, tem complexidade $O(m)$, onde $m$ é a distancia máxima que temos
uma casa.

A segunda solução ``naive'' é linear em relação ao tamanho do vetor de
distancias, ou seja, tem complexidade $O(n)$, onde $n$ é o número de
casas na rua, a menos da ordenação do final. Com a ordenação, a
complexidade é $O(n \log n)$.

A terceira solução é uma força bruta, escolhendo aleatóriamente uma
posição para colocar a antena o que, com estradas muito grandes, pode
demorar uma quantidade de tempo não-polinomial.

A quarta solução é a única solução ótima e possui complexidade linear
a menos da chamada para a função de ordenação. Ou seja, seria linear
se a entrada já viesse ordenada. Como este não é necessariamente o
caso, o algoritmo demora tempo $O(n\log n)$.
